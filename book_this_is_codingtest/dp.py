#다이나믹 프로그래밍을 사용할 수 있는 조건
# 1. 큰 문제를 작은 문제로 나눌 수 있다.
# 2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일
#일반적으로 재귀함수보다 반복문을 사용한 dp가 더 성능이 좋다.

#---------
#피보나치 수열 
#재귀함수를 이용한 top down 방식

#한번 계산된 결과를 memoization 하기 위한 리스트 초기화
d = [0] * 100

def fibo(x):
    #종료 조건
    if x == 1 or x == 2:
        return 1
    #이미 계산한 적이 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    d[x] = fibo(x-1) + fibo(x-2)
    return d[x]

#반복문을 사용하는 bottom up 방식
d = [0] * 100
#첫번째 피보나치 수와 두번째 피보나치수는 1
d[1] = 1
d[2] = 1
n = 99

for i in range(3, n +1):
    d[i] = d[i-1] + d[i-2]